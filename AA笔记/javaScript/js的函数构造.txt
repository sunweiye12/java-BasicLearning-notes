 js的函数
	1、js函数定义的方式
		(1)普通方式
			语法：function 函数名(参数列表){函数体}
			示例：
				function method(){
					alert("xxx");
				}
				method();
		(2)匿名函数
			语法：function(参数列表){函数体}
			示例：
				var method = function(){
					alert("yyy");
				};
				method();
		(3)对象函数
			语法：new Function(参数1,参数2,...,函数体);
			注意：参数名称必须使用字符串形式、最后一个默认是函数体且函数体需要字符串形式
			示例：
				var fn = new Function("a","b","alert(a+b)");
				fn(2,5);
	2、函数的参数
		(1)形参没有var去修饰
		(2)形参和实参个数不一定相等
		(3)arguments对象 是个数组 会将传递的实参进行封装
		function fn(a,b,c){
			//var sum = a+b+c;
			//alert(sum);
			//arguments是个数组  会将传递的实参进行封装(底层内置数组)
			for(var i=0;i<arguments.length;i++){
				alert(arguments[i]);
			}
		}
		fn(1,2,4,8);
		
	3、返回值
		(1)在定义函数的时候不必表明是否具有返回值
		(2)返回值仅仅通过return关键字就可以了 return后的代码不执行
		function fn(a,b){
			return a+b;			 return后的代码不执行
			//alert("xxxx");
		}
		alert(fn(2,3));
	
	4、js的全局函数
		(1)编码和解码
			encodeURI()   			decodeURI()       		(只转中文  最常用)
			encodeURIComponet()	  	decodeURIComponent()
			escape()				unescape()
			三者区别：
				进行编码的符号范围不同吧，实际开发中常使用第一种
		(2)强制转换
			Number()
			String()
			Boolean()
		(3)转成数字
			parseInt()
			parseFloat()
		(4)eval()方法	
			将字符串当作脚本进行解析运行
			//var str = "var a=2;var b=3;alert(a+b)";
			//eval(str);
			function print(str){
				eval(str);
			}
			print("自定义逻辑");		 
			 
			 
			 