迭代器用于 遍历集合
对 collection 进行迭代的迭代器。
* 迭代器原理:迭代器是对集合进行遍历,而每一个集合内部的存储结构都是不同的,所以每一个集合存和取都是不一样,
	那么就需要在每一个类中定义hasNext()和next()方法,这样做是可以的,但是会让整个集合体系过于臃肿,迭代器是将这样的方法向上抽取出接口,
	然后在每个类的内部,定义自己迭代方式,这样做的好处有二,第一规定了整个集合体系的遍历方式都是hasNext()和next()方法,
	第二,代码有底层内部实现,使用者不用管怎么实现的,会用即可 
		
		Iterator ite = c.iterator();            //获取一个迭代器用于 遍历集合
	    while (ite.hasNext()) {                 //判断集合中是否存在元素(具有指针效应)
	    	System.out.println(ite.next());     //获取该元素并打印

	    	

:解决并发修改异常(list集合特有的方法)
	* a:迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)
	* b:集合遍历元素，集合修改元素
	
			ListIterator lit = list.listIterator();		//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法
			while(lit.hasNext()) {
				String str = (String)lit.next();
				if(str.equals("world")) {
					lit.add("javaee");	
				}
			}
集合框架(ListIterator)(了解)
* boolean hasNext()是否有下一个
* boolean hasPrevious()是否有前一个
* Object next()返回下一个元素
* Object previous();返回上一个元素